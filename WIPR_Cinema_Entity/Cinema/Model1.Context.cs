//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cinema
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CinemaEntities : DbContext
    {
        public CinemaEntities()
            : base("name=CinemaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Movie> Movies { get; set; }
        public virtual DbSet<Reservation> Reservations { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<ShowTime> ShowTimes { get; set; }
        public virtual DbSet<User_Information> User_Information { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<View_AllCustomers> View_AllCustomers { get; set; }
        public virtual DbSet<View_AllEmployees> View_AllEmployees { get; set; }
        public virtual DbSet<View_ClosedShowing> View_ClosedShowing { get; set; }
        public virtual DbSet<View_ComingShowing> View_ComingShowing { get; set; }
        public virtual DbSet<View_Comments> View_Comments { get; set; }
        public virtual DbSet<View_ShowingInDay> View_ShowingInDay { get; set; }
    
        [DbFunction("CinemaEntities", "Fn_AdminLogin")]
        public virtual IQueryable<Fn_AdminLogin_Result> Fn_AdminLogin(string user_ID, string password)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_AdminLogin_Result>("[CinemaEntities].[Fn_AdminLogin](@User_ID, @Password)", user_IDParameter, passwordParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_BookedSeats")]
        public virtual IQueryable<Fn_BookedSeats_Result> Fn_BookedSeats(string showTime_ID)
        {
            var showTime_IDParameter = showTime_ID != null ?
                new ObjectParameter("ShowTime_ID", showTime_ID) :
                new ObjectParameter("ShowTime_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_BookedSeats_Result>("[CinemaEntities].[Fn_BookedSeats](@ShowTime_ID)", showTime_IDParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_CustomerLogin")]
        public virtual IQueryable<Fn_CustomerLogin_Result> Fn_CustomerLogin(string user_ID, string password)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_CustomerLogin_Result>("[CinemaEntities].[Fn_CustomerLogin](@User_ID, @Password)", user_IDParameter, passwordParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_ShowTimeByActor")]
        public virtual IQueryable<Fn_ShowTimeByActor_Result> Fn_ShowTimeByActor(string actor_Name)
        {
            var actor_NameParameter = actor_Name != null ?
                new ObjectParameter("Actor_Name", actor_Name) :
                new ObjectParameter("Actor_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ShowTimeByActor_Result>("[CinemaEntities].[Fn_ShowTimeByActor](@Actor_Name)", actor_NameParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_ShowTimeByCompany")]
        public virtual IQueryable<Fn_ShowTimeByCompany_Result> Fn_ShowTimeByCompany(string company)
        {
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ShowTimeByCompany_Result>("[CinemaEntities].[Fn_ShowTimeByCompany](@Company)", companyParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_ShowTimeByScreen")]
        public virtual IQueryable<Fn_ShowTimeByScreen_Result> Fn_ShowTimeByScreen(string screen_Resolution)
        {
            var screen_ResolutionParameter = screen_Resolution != null ?
                new ObjectParameter("Screen_Resolution", screen_Resolution) :
                new ObjectParameter("Screen_Resolution", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ShowTimeByScreen_Result>("[CinemaEntities].[Fn_ShowTimeByScreen](@Screen_Resolution)", screen_ResolutionParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_SumTotalCost")]
        public virtual IQueryable<Fn_SumTotalCost_Result> Fn_SumTotalCost(string showTime_ID, string user_ID, Nullable<int> count)
        {
            var showTime_IDParameter = showTime_ID != null ?
                new ObjectParameter("ShowTime_ID", showTime_ID) :
                new ObjectParameter("ShowTime_ID", typeof(string));
    
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_SumTotalCost_Result>("[CinemaEntities].[Fn_SumTotalCost](@ShowTime_ID, @User_ID, @Count)", showTime_IDParameter, user_IDParameter, countParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_UserBooked")]
        public virtual IQueryable<Fn_UserBooked_Result> Fn_UserBooked(string user_ID)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_UserBooked_Result>("[CinemaEntities].[Fn_UserBooked](@User_ID)", user_IDParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_UserCommented")]
        public virtual IQueryable<Fn_UserCommented_Result> Fn_UserCommented(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_UserCommented_Result>("[CinemaEntities].[Fn_UserCommented](@ID)", iDParameter);
        }
    
        [DbFunction("CinemaEntities", "Fn_UserInformation")]
        public virtual IQueryable<Fn_UserInformation_Result> Fn_UserInformation(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_UserInformation_Result>("[CinemaEntities].[Fn_UserInformation](@ID)", iDParameter);
        }
    
        public virtual int Sp_AddNewCompany(string company_ID, string name, string email, string phone, string address)
        {
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddNewCompany", company_IDParameter, nameParameter, emailParameter, phoneParameter, addressParameter);
        }
    
        public virtual int Sp_AddNewCustomer(string user_ID, string password, string name, string email, string address, string phone)
        {
            var user_IDParameter = user_ID != null ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddNewCustomer", user_IDParameter, passwordParameter, nameParameter, emailParameter, addressParameter, phoneParameter);
        }
    
        public virtual int Sp_AddNewMovie(string movie_ID, string movie_Title, Nullable<int> movie_Cost, Nullable<System.TimeSpan> runtime, string main_Actor, string director, string company_ID)
        {
            var movie_IDParameter = movie_ID != null ?
                new ObjectParameter("Movie_ID", movie_ID) :
                new ObjectParameter("Movie_ID", typeof(string));
    
            var movie_TitleParameter = movie_Title != null ?
                new ObjectParameter("Movie_Title", movie_Title) :
                new ObjectParameter("Movie_Title", typeof(string));
    
            var movie_CostParameter = movie_Cost.HasValue ?
                new ObjectParameter("Movie_Cost", movie_Cost) :
                new ObjectParameter("Movie_Cost", typeof(int));
    
            var runtimeParameter = runtime.HasValue ?
                new ObjectParameter("Runtime", runtime) :
                new ObjectParameter("Runtime", typeof(System.TimeSpan));
    
            var main_ActorParameter = main_Actor != null ?
                new ObjectParameter("Main_Actor", main_Actor) :
                new ObjectParameter("Main_Actor", typeof(string));
    
            var directorParameter = director != null ?
                new ObjectParameter("Director", director) :
                new ObjectParameter("Director", typeof(string));
    
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddNewMovie", movie_IDParameter, movie_TitleParameter, movie_CostParameter, runtimeParameter, main_ActorParameter, directorParameter, company_IDParameter);
        }
    
        public virtual int Sp_AddNewRoom(string room_ID, Nullable<int> maxSeats, string screen_Resolution, string audio_Quality)
        {
            var room_IDParameter = room_ID != null ?
                new ObjectParameter("Room_ID", room_ID) :
                new ObjectParameter("Room_ID", typeof(string));
    
            var maxSeatsParameter = maxSeats.HasValue ?
                new ObjectParameter("MaxSeats", maxSeats) :
                new ObjectParameter("MaxSeats", typeof(int));
    
            var screen_ResolutionParameter = screen_Resolution != null ?
                new ObjectParameter("Screen_Resolution", screen_Resolution) :
                new ObjectParameter("Screen_Resolution", typeof(string));
    
            var audio_QualityParameter = audio_Quality != null ?
                new ObjectParameter("Audio_Quality", audio_Quality) :
                new ObjectParameter("Audio_Quality", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddNewRoom", room_IDParameter, maxSeatsParameter, screen_ResolutionParameter, audio_QualityParameter);
        }
    
        public virtual int Sp_AddNewShowTime(string showTime_ID, string movie_ID, Nullable<System.DateTime> date, Nullable<System.TimeSpan> start_Time, string room_ID)
        {
            var showTime_IDParameter = showTime_ID != null ?
                new ObjectParameter("ShowTime_ID", showTime_ID) :
                new ObjectParameter("ShowTime_ID", typeof(string));
    
            var movie_IDParameter = movie_ID != null ?
                new ObjectParameter("Movie_ID", movie_ID) :
                new ObjectParameter("Movie_ID", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var start_TimeParameter = start_Time.HasValue ?
                new ObjectParameter("Start_Time", start_Time) :
                new ObjectParameter("Start_Time", typeof(System.TimeSpan));
    
            var room_IDParameter = room_ID != null ?
                new ObjectParameter("Room_ID", room_ID) :
                new ObjectParameter("Room_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddNewShowTime", showTime_IDParameter, movie_IDParameter, dateParameter, start_TimeParameter, room_IDParameter);
        }
    
        public virtual int Sp_AddOrUpdateComment(Nullable<int> reservation_ID, Nullable<int> rating_Point, string comment)
        {
            var reservation_IDParameter = reservation_ID.HasValue ?
                new ObjectParameter("Reservation_ID", reservation_ID) :
                new ObjectParameter("Reservation_ID", typeof(int));
    
            var rating_PointParameter = rating_Point.HasValue ?
                new ObjectParameter("Rating_Point", rating_Point) :
                new ObjectParameter("Rating_Point", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddOrUpdateComment", reservation_IDParameter, rating_PointParameter, commentParameter);
        }
    
        public virtual int Sp_AddReservation(string iD, string showID, Nullable<int> seat)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var showIDParameter = showID != null ?
                new ObjectParameter("ShowID", showID) :
                new ObjectParameter("ShowID", typeof(string));
    
            var seatParameter = seat.HasValue ?
                new ObjectParameter("Seat", seat) :
                new ObjectParameter("Seat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AddReservation", iDParameter, showIDParameter, seatParameter);
        }
    
        public virtual int Sp_DelReservation(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DelReservation", iDParameter);
        }
    
        public virtual int Sp_UpdateCompany(string company_ID, string name, string email, string phone, string address)
        {
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateCompany", company_IDParameter, nameParameter, emailParameter, phoneParameter, addressParameter);
        }
    
        public virtual int Sp_UpdateMovie(string movie_ID, string movie_Title, Nullable<int> movie_Cost, Nullable<System.TimeSpan> runtime, string main_Actor, string director, string company_ID)
        {
            var movie_IDParameter = movie_ID != null ?
                new ObjectParameter("Movie_ID", movie_ID) :
                new ObjectParameter("Movie_ID", typeof(string));
    
            var movie_TitleParameter = movie_Title != null ?
                new ObjectParameter("Movie_Title", movie_Title) :
                new ObjectParameter("Movie_Title", typeof(string));
    
            var movie_CostParameter = movie_Cost.HasValue ?
                new ObjectParameter("Movie_Cost", movie_Cost) :
                new ObjectParameter("Movie_Cost", typeof(int));
    
            var runtimeParameter = runtime.HasValue ?
                new ObjectParameter("Runtime", runtime) :
                new ObjectParameter("Runtime", typeof(System.TimeSpan));
    
            var main_ActorParameter = main_Actor != null ?
                new ObjectParameter("Main_Actor", main_Actor) :
                new ObjectParameter("Main_Actor", typeof(string));
    
            var directorParameter = director != null ?
                new ObjectParameter("Director", director) :
                new ObjectParameter("Director", typeof(string));
    
            var company_IDParameter = company_ID != null ?
                new ObjectParameter("Company_ID", company_ID) :
                new ObjectParameter("Company_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateMovie", movie_IDParameter, movie_TitleParameter, movie_CostParameter, runtimeParameter, main_ActorParameter, directorParameter, company_IDParameter);
        }
    
        public virtual int Sp_UpdateRoom(string room_ID, Nullable<int> maxSeats, string screen_Resolution, string audio_Quality)
        {
            var room_IDParameter = room_ID != null ?
                new ObjectParameter("Room_ID", room_ID) :
                new ObjectParameter("Room_ID", typeof(string));
    
            var maxSeatsParameter = maxSeats.HasValue ?
                new ObjectParameter("MaxSeats", maxSeats) :
                new ObjectParameter("MaxSeats", typeof(int));
    
            var screen_ResolutionParameter = screen_Resolution != null ?
                new ObjectParameter("Screen_Resolution", screen_Resolution) :
                new ObjectParameter("Screen_Resolution", typeof(string));
    
            var audio_QualityParameter = audio_Quality != null ?
                new ObjectParameter("Audio_Quality", audio_Quality) :
                new ObjectParameter("Audio_Quality", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateRoom", room_IDParameter, maxSeatsParameter, screen_ResolutionParameter, audio_QualityParameter);
        }
    
        public virtual int Sp_UpdateShowTime(string showTime_ID, string movie_ID, Nullable<System.DateTime> date, Nullable<System.TimeSpan> start_Time, string room_ID)
        {
            var showTime_IDParameter = showTime_ID != null ?
                new ObjectParameter("ShowTime_ID", showTime_ID) :
                new ObjectParameter("ShowTime_ID", typeof(string));
    
            var movie_IDParameter = movie_ID != null ?
                new ObjectParameter("Movie_ID", movie_ID) :
                new ObjectParameter("Movie_ID", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var start_TimeParameter = start_Time.HasValue ?
                new ObjectParameter("Start_Time", start_Time) :
                new ObjectParameter("Start_Time", typeof(System.TimeSpan));
    
            var room_IDParameter = room_ID != null ?
                new ObjectParameter("Room_ID", room_ID) :
                new ObjectParameter("Room_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateShowTime", showTime_IDParameter, movie_IDParameter, dateParameter, start_TimeParameter, room_IDParameter);
        }
    }
}
